buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-core:4.31.1'
        classpath 'org.liquibase.gradle:org.liquibase.gradle.gradle.plugin:3.0.2'

    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.liquibase.gradle' version '3.0.2'

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    liquibaseRuntime 'org.liquibase:liquibase-core:4.31.1'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'info.picocli:picocli:4.7.6'
    liquibaseRuntime 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core:4.31.1'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'


    compileOnly 'org.projectlombok:lombok:1.18.38'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.6.11.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor  'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def props = new Properties()

def propsFile = file("src/main/resources/application.properties")
if (propsFile.exists()) {
    propsFile.withInputStream {
        props.load(it)
    }
}

liquibase {
    activities {
        main {
            changeLogFile props.getProperty("spring.liquibase.change-log")
            url props.getProperty("spring.datasource.url")
            username props.getProperty("spring.datasource.username")
            password props.getProperty("spring.datasource.password")
        }

    }
}


tasks.named('test') {
    jvmArgs "-javaagent:${classpath.find { it.name.contains('byte-buddy-agent') }.absolutePath}"
    useJUnitPlatform()
}
